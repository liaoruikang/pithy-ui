@use '../function/function' as f;
@use '../mixins/mixins' as m;
@use '../function/bem' as *;
@use '../mixins/vars';
@use '../common/config' as c;

@include vars.set_css_vars('input');

#{b('input')} {
  display: inline-flex;
  height: f.compute_h_size(30px);
  line-height: f.compute_h_size(30px - 2px);
  min-width: f.compute_w_size(170px);
  box-sizing: border-box;
  font-size: f.compute_size(14px);
  vertical-align: middle;

  #{e('wrapper')} {
    @include m.transition(border);

    @include m.center_flex('vertical');

    width: 100%;
    height: 100%;
    padding: 0 f.compute_size(6px);
    box-sizing: border-box;
    border: 1px solid f.get_var(bd-color);
    border-radius: 4px;

    &:focus-within {
      border: 1px solid f.get_var(input-focus-color);
    }

    #{bem('input', 'inner')} {
      width: 100%;
      height: 100%;
      background-color: transparent;
      padding: 0;
      border: 0;
      font-size: inherit;
      outline: 0;
      box-sizing: border-box;
      -moz-appearance: textfield;

      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }

  &#{is('prepend')},
  &#{is('number')} {
    #{e('wrapper')} {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    #{e('prepend')} {
      border-right: 0;
      border-radius: 4px 0 0 4px;
    }
  }

  &#{is('append')},
  &#{is('number')} {
    #{e('wrapper')} {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    #{e('append')} {
      border-left: 0;
      border-radius: 0 4px 4px 0;
    }
  }
  #{e('append')},
  #{e('prepend')} {
    @include m.transition(border color);

    padding: 0 f.compute_size(4px);
    border: 1px solid f.get_var(bd-color);
    color: f.get_var(text-color);
    user-select: none;

    @each $selector in & {
      #{m('number', '#{$selector}')} {
        @include m.center_flex('vertical');
        @include m.transition(color);

        width: 100%;
        height: 100%;
        cursor: pointer;

        &:hover {
          color: f.get_var(input-focus-color);
        }
      }
    }
  }
}
